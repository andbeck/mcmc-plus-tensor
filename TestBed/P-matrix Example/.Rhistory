0.8,   0.8,   0.8,   0.8,   1.0,   0.8,   0.6,   0.4,   0.2,   0.0,
0.8,   0.8,   0.8,   0.8,   0.8,   1.0,   0.6,   0.4,   0.2,   0.0,
0.6,   0.6,   0.6,   0.6,   0.6,   0.6,   1.5,   0.8,   0.4,   0.2,
0.4,   0.4,   0.4,   0.4,   0.4,   0.4,   0.8,   2.0,   1.0,   0.4,
0.2,   0.2,   0.2,   0.2,   0.2,   0.2,   0.4,   1.0,   2.5,   1.2,
0.0,   0.0,   0.0,   0.0,   0.0,   0.0,   0.2,   0.4,   1.2,   3.0),10,10)
bv_4 <- lapply(1, mvrnorm, n=200, mu=rep(0,10), Sigma=G_4) # 2.7.12 found this to be G_3 .... hmmm..... changed to G_4
sire4<-lapply(bv_4, function(x) data.frame(sire=rep(1:nrow(x),each=4), rpt=rep(1:4,nrow(x)),
res1=rnorm(800,-6,1.35^2),
res2=rnorm(800,-5,1.35^2),
res3=rnorm(800,-4,1.35^2),
res4=rnorm(800,-4.5,1.35^2),
res5=rnorm(800,-5.5,1.35^2),
res6=rnorm(800,5,1.35^2),
res7=rnorm(800,4,1.35^2),
res8=rnorm(800,6,1.35^2),
res9=rnorm(800,4.5,1.35^2),
res10=rnorm(800,6.5,1.35^2),
bv1=rep(x[,1],each=4),bv2=rep(x[,2],each=4),bv3=rep(x[,3],each=4),bv4=rep(x[,4],each=4),bv5=rep(x[,5],each=4),
bv6=rep(x[,6],each=4),bv7=rep(x[,7],each=4),bv8=rep(x[,8],each=4),bv9=rep(x[,9],each=4),bv10=rep(x[,10],each=4)))
data4<-lapply(sire4, function(x) cbind(x, trait1=x$res1+x$bv1, trait2=x$res2+x$bv2, trait3=x$res3+x$bv3,trait4=x$res4+x$bv4,trait5=x$res5+x$bv5,trait6=x$res6+x$bv6,trait7=x$res7+x$bv7,trait8=x$res8+x$bv8,trait9=x$res9+x$bv9,trait10=x$res10+x$bv10))
# a more creative phenotype for visualisation
#-5,-2,-1,-2,-3,5,-7,2,1,4
bv_4.1 <- lapply(1, mvrnorm, n=200, mu=rep(0,10), Sigma=G_3)
sire4.1<-lapply(bv_4, function(x) data.frame(sire=rep(1:nrow(x),each=4), rpt=rep(1:4,nrow(x)),
res1=rnorm(800,-5,1.35^2),
res2=rnorm(800,-2,1.35^2),
res3=rnorm(800,-1,1.35^2),
res4=rnorm(800,-2,1.35^2),
res5=rnorm(800,-3,1.35^2),
res6=rnorm(800,5,1.35^2),
res7=rnorm(800,-7,1.35^2),
res8=rnorm(800,2,1.35^2),
res9=rnorm(800,1,1.35^2),
res10=rnorm(800,4,1.35^2),
bv1=rep(x[,1],each=4),bv2=rep(x[,2],each=4),bv3=rep(x[,3],each=4),bv4=rep(x[,4],each=4),bv5=rep(x[,5],each=4),
bv6=rep(x[,6],each=4),bv7=rep(x[,7],each=4),bv8=rep(x[,8],each=4),bv9=rep(x[,9],each=4),bv10=rep(x[,10],each=4)))
data4.1<-lapply(sire4.1, function(x) cbind(x, trait1=x$res1+x$bv1, trait2=x$res2+x$bv2, trait3=x$res3+x$bv3,trait4=x$res4+x$bv4,trait5=x$res5+x$bv5,trait6=x$res6+x$bv6,trait7=x$res7+x$bv7,trait8=x$res8+x$bv8,trait9=x$res9+x$bv9,trait10=x$res10+x$bv10))
# Two vectors in environment 1, two vectors in environments 2
# and relationships between traits reduce. Higher variation
# in environment 2
G_5<-matrix(c(
1.0,   0.6,   0.4,   0.2,   0.0,  -0.8,  -0.6,  -0.4,  -0.2,   0.0,
0.6,   1.0,   0.6,   0.4,   0.2,  -0.6,  -0.8,  -0.6,  -0.4,  -0.2,
0.4,   0.6,   1.0,   0.6,   0.4,  -0.4,  -0.6,  -0.8,  -0.6,  -0.4,
0.2,   0.4,   0.6,   1.0,   0.6,  -0.2,  -0.4,  -0.6,  -0.8,  -0.6,
0.0,   0.2,   0.4,   0.6,   1.0,   0.0,  -0.2,  -0.4,  -0.6,  -0.8,
-0.8,  -0.6,  -0.4,  -0.2,   0.0,   1.0,   0.6,   0.4,   0.2,   0.0,
-0.6,  -0.8,  -0.6,  -0.4,  -0.2,   0.6,   1.5,   1.0,   0.4,   0.2,
-0.4,  -0.6,  -0.8,  -0.6,  -0.4,   0.4,   1.0,   2.0,   1.2,   0.4,
-0.2,  -0.4,  -0.6,  -0.8,  -0.6,   0.2,   0.4,   1.2,   2.5,   1.4,
0.0,  -0.2,  -0.4,  -0.6,  -0.8,   0.0,   0.2,   0.4,   1.4,   3.0),10,10)
bv_5 <- lapply(1, mvrnorm, n=200, mu=rep(0,10), Sigma=G_5)
sire5<-lapply(bv_5, function(x) data.frame(sire=rep(1:nrow(x),each=4), rpt=rep(1:4,nrow(x)),
res1=rnorm(800,-6,1.35^2),
res2=rnorm(800,-5,1.35^2),
res3=rnorm(800,-4,1.35^2),
res4=rnorm(800,-4.5,1.35^2),
res5=rnorm(800,-5.5,1.35^2),
res6=rnorm(800,5,1.35^2),
res7=rnorm(800,4,1.35^2),
res8=rnorm(800,6,1.35^2),
res9=rnorm(800,4.5,1.35^2),
res10=rnorm(800,6.5,1.35^2),
bv1=rep(x[,1],each=4),bv2=rep(x[,2],each=4),bv3=rep(x[,3],each=4),bv4=rep(x[,4],each=4),bv5=rep(x[,5],each=4),
bv6=rep(x[,6],each=4),bv7=rep(x[,7],each=4),bv8=rep(x[,8],each=4),bv9=rep(x[,9],each=4),bv10=rep(x[,10],each=4)))
data5<-lapply(sire5, function(x) cbind(x, trait1=x$res1+x$bv1, trait2=x$res2+x$bv2, trait3=x$res3+x$bv3,trait4=x$res4+x$bv4,trait5=x$res5+x$bv5,trait6=x$res6+x$bv6,trait7=x$res7+x$bv7,trait8=x$res8+x$bv8,trait9=x$res9+x$bv9,trait10=x$res10+x$bv10))
# plot example 4.1
traits<-data4.1[[1]][,23:32]
#	Plot Trait x Env patterns
col2rgb(c("black","red","green","blue","yellow"))
par(mar=c(5,5,4,1))
# plot first trait without axes
plot(traits$trait1~rep(1,800),col=1,xlim=c(0.75,2.5),ylim=c(-12,12),axes=FALSE, ylab="Trait Value", xlab="Environment")
axis(2) # add y axis
axis(1,at=c(1,2)) # add x-axis
# add clone means at jittered locations for E1
points(traits$trait2~rep(1.05,800),col=2,xlim=c(0,3))
points(traits$trait3~rep(1.1,800),col=3,xlim=c(0,3))
points(traits$trait4~rep(0.9,800),col=4,xlim=c(0,3))
points(traits$trait5~rep(0.95,800),col="yellow",xlim=c(0,3))
# add clone means at jittered locations for E2
points(traits$trait6~rep(2,800),col=1,xlim=c(0,3))
points(traits$trait7~rep(2.05,800),col=2,xlim=c(0,3))
points(traits$trait8~rep(2.1,800),col=3,xlim=c(0,3))
points(traits$trait9~rep(1.9,800),col=4,xlim=c(0,3))
points(traits$trait10~rep(1.95,800),col="yellow",xlim=c(0,3))
# add lines between the dots
segments(rep(1,800),traits$trait1,rep(2,800),traits$trait6,rgb(0,0,0,0.2))
segments(rep(1.05,800),traits$trait2,rep(2.05,800),traits$trait7,rgb(1,0,0,0.1))
segments(rep(1.1,800),traits$trait3,rep(2.1,800),traits$trait8,rgb(0,1,0,0.1))
segments(rep(0.9,800),traits$trait4,rep(1.9,800),traits$trait9,rgb(0,0,1,0.2))
segments(rep(0.95,800),traits$trait5,rep(1.95,800),traits$trait10,rgb(1,1,0,0.1))
load("/Users/apb/Dropbox/###Subspace/RCodes/MainMethod/MultiEnv_Phenotype.RData")
load("MultiEnv_Phenotype.RData")
setwd("~/Desktop/P-matrix Example")
load("MultiEnv_Phenotype.RData")
load("SpecialPhenotypeModels.RData")
load("MultiEnv_Phenotype.RData")
load("SpecialPhenotypeModels.RData")
ls()
rm(list = ls())
load("MultiEnv_Phenotype.RData")
ls()
rm(list = ls())
load("SpecialPhenotypeModels.RData")
ls()
load("MultiEnv_Phenotype.RData")
traits<-data4.1[[1]][,23:32]
ls()
# plot multi-trait reaction normsl from example 4.1
traits<-data4[[1]][,23:32]
#	Plot Trait x Env patterns
col2rgb(c("black","red","green","blue","yellow"))
par(mar=c(5,5,4,1))
# plot first trait without axes
plot(traits$trait1~rep(1,800),col=1,xlim=c(0.75,2.5),ylim=c(-12,12),axes=FALSE, ylab="Trait Value", xlab="Environment")
axis(2) # add y axis
axis(1,at=c(1,2)) # add x-axis
# add clone means at jittered locations for E1
points(traits$trait2~rep(1.05,800),col=2,xlim=c(0,3))
points(traits$trait3~rep(1.1,800),col=3,xlim=c(0,3))
points(traits$trait4~rep(0.9,800),col=4,xlim=c(0,3))
points(traits$trait5~rep(0.95,800),col="yellow",xlim=c(0,3))
# add clone means at jittered locations for E2
points(traits$trait6~rep(2,800),col=1,xlim=c(0,3))
points(traits$trait7~rep(2.05,800),col=2,xlim=c(0,3))
points(traits$trait8~rep(2.1,800),col=3,xlim=c(0,3))
points(traits$trait9~rep(1.9,800),col=4,xlim=c(0,3))
points(traits$trait10~rep(1.95,800),col="yellow",xlim=c(0,3))
# add lines between the dots
segments(rep(1,800),traits$trait1,rep(2,800),traits$trait6,rgb(0,0,0,0.2))
segments(rep(1.05,800),traits$trait2,rep(2.05,800),traits$trait7,rgb(1,0,0,0.1))
segments(rep(1.1,800),traits$trait3,rep(2.1,800),traits$trait8,rgb(0,1,0,0.1))
segments(rep(0.9,800),traits$trait4,rep(1.9,800),traits$trait9,rgb(0,0,1,0.2))
segments(rep(0.95,800),traits$trait5,rep(1.95,800),traits$trait10,rgb(1,1,0,0.1))
# all five P models
psb2(model1.1P,model1.2P,no.traits=5,method="P",axes.lab=TRUE)
psb2(model2.1P,model2.2P,no.traits=5,method="P",axes.lab=TRUE)
psb2(model3.1P,model3.2P,no.traits=5,method="P",axes.lab=TRUE)
psb2(model4.1P,model4.2P,no.traits=5,method="P",axes.lab=TRUE)
psb2(model5.1P,model5.2P,no.traits=5,method="P",axes.lab=TRUE)
# plot multi-trait reaction normsl from example 4.1
traits<-data4[[1]][,23:32]
#	Plot Trait x Env patterns
col2rgb(c("black","red","green","blue","yellow"))
par(mar=c(5,5,4,1))
# plot first trait without axes
plot(traits$trait1~rep(1,800),col=1,xlim=c(0.75,2.5),ylim=c(-12,12),axes=FALSE, ylab="Trait Value", xlab="Environment")
axis(2) # add y axis
axis(1,at=c(1,2)) # add x-axis
# add clone means at jittered locations for E1
points(traits$trait2~rep(1.05,800),col=2,xlim=c(0,3))
points(traits$trait3~rep(1.1,800),col=3,xlim=c(0,3))
points(traits$trait4~rep(0.9,800),col=4,xlim=c(0,3))
points(traits$trait5~rep(0.95,800),col="yellow",xlim=c(0,3))
# add clone means at jittered locations for E2
points(traits$trait6~rep(2,800),col=1,xlim=c(0,3))
points(traits$trait7~rep(2.05,800),col=2,xlim=c(0,3))
points(traits$trait8~rep(2.1,800),col=3,xlim=c(0,3))
points(traits$trait9~rep(1.9,800),col=4,xlim=c(0,3))
points(traits$trait10~rep(1.95,800),col="yellow",xlim=c(0,3))
# add lines between the dots
segments(rep(1,800),traits$trait1,rep(2,800),traits$trait6,rgb(0,0,0,0.2))
segments(rep(1.05,800),traits$trait2,rep(2.05,800),traits$trait7,rgb(1,0,0,0.1))
segments(rep(1.1,800),traits$trait3,rep(2.1,800),traits$trait8,rgb(0,1,0,0.1))
segments(rep(0.9,800),traits$trait4,rep(1.9,800),traits$trait9,rgb(0,0,1,0.2))
segments(rep(0.95,800),traits$trait5,rep(1.95,800),traits$trait10,rgb(1,1,0,0.1))
ls()
load('MultiEnv_Phenotype.Rdata')
load('SpecialPhenotypeModels.Rdata')
# source the plotting script
source('psb2.R')
ls()
# plot example 4.1
traits<-data4.1[[1]][,23:32]
load('SpecialPhenotypeModels.Rdata')
# plot example 4.1
traits<-data4.1[[1]][,23:32]
rm(list = ls())
#load('MultiEnv_Phenotype.Rdata')
#load('SpecialPhenotypeModels.Rdata')
load('MultiEnv.NewPrior.RData')
ls()
load('SpecialPhenotypeModels.Rdata')
ls()
rm(list=ls())
load('MultiEnv.NewPrior.RData')
ls()
# Example 4.1 data are not loaded -----
# Example 4.1 Data: a more creative phenotype for visualisation ----
#-5,-2,-1,-2,-3,5,-7,2,1,4
bv_4.1 <- lapply(1, mvrnorm, n=200, mu=rep(0,10), Sigma=G_3)
sire4.1<-lapply(bv_4, function(x) data.frame(sire=rep(1:nrow(x),each=4), rpt=rep(1:4,nrow(x)),
res1=rnorm(800,-5,1.35^2),
res2=rnorm(800,-2,1.35^2),
res3=rnorm(800,-1,1.35^2),
res4=rnorm(800,-2,1.35^2),
res5=rnorm(800,-3,1.35^2),
res6=rnorm(800,5,1.35^2),
res7=rnorm(800,-7,1.35^2),
res8=rnorm(800,2,1.35^2),
res9=rnorm(800,1,1.35^2),
res10=rnorm(800,4,1.35^2),
bv1=rep(x[,1],each=4),bv2=rep(x[,2],each=4),bv3=rep(x[,3],each=4),bv4=rep(x[,4],each=4),bv5=rep(x[,5],each=4),
bv6=rep(x[,6],each=4),bv7=rep(x[,7],each=4),bv8=rep(x[,8],each=4),bv9=rep(x[,9],each=4),bv10=rep(x[,10],each=4)))
data4.1<-lapply(sire4.1, function(x) cbind(x, trait1=x$res1+x$bv1, trait2=x$res2+x$bv2, trait3=x$res3+x$bv3,trait4=x$res4+x$bv4,trait5=x$res5+x$bv5,trait6=x$res6+x$bv6,trait7=x$res7+x$bv7,trait8=x$res8+x$bv8,trait9=x$res9+x$bv9,trait10=x$res10+x$bv10))
# plot example 4.1
traits<-data4.1[[1]][,23:32]
#	Plot Trait x Env patterns
col2rgb(c("black","red","green","blue","yellow"))
par(mar=c(5,5,4,1))
# plot first trait without axes
plot(traits$trait1~rep(1,800),col=1,xlim=c(0.75,2.5),ylim=c(-12,12),axes=FALSE, ylab="Trait Value", xlab="Environment")
axis(2) # add y axis
axis(1,at=c(1,2)) # add x-axis
# add clone means at jittered locations for E1
points(traits$trait2~rep(1.05,800),col=2,xlim=c(0,3))
points(traits$trait3~rep(1.1,800),col=3,xlim=c(0,3))
points(traits$trait4~rep(0.9,800),col=4,xlim=c(0,3))
points(traits$trait5~rep(0.95,800),col="yellow",xlim=c(0,3))
# add clone means at jittered locations for E2
points(traits$trait6~rep(2,800),col=1,xlim=c(0,3))
points(traits$trait7~rep(2.05,800),col=2,xlim=c(0,3))
points(traits$trait8~rep(2.1,800),col=3,xlim=c(0,3))
points(traits$trait9~rep(1.9,800),col=4,xlim=c(0,3))
points(traits$trait10~rep(1.95,800),col="yellow",xlim=c(0,3))
# add lines between the dots
segments(rep(1,800),traits$trait1,rep(2,800),traits$trait6,rgb(0,0,0,0.2))
segments(rep(1.05,800),traits$trait2,rep(2.05,800),traits$trait7,rgb(1,0,0,0.1))
segments(rep(1.1,800),traits$trait3,rep(2.1,800),traits$trait8,rgb(0,1,0,0.1))
segments(rep(0.9,800),traits$trait4,rep(1.9,800),traits$trait9,rgb(0,0,1,0.2))
segments(rep(0.95,800),traits$trait5,rep(1.95,800),traits$trait10,rgb(1,1,0,0.1))
psb2(model4.1,model4.2, method = "P")
# source the plotting script to make the P-matrix pictures ----
source('psb2.R')
psb2(model4.1,model4.2, method = "P")
traceback()
psb2
model4.1
ls()
summary(model4.1)
model4.1
?MCMCglmm
library(MCMCglmm)
library(MASS)
library(mvtnorm)
psb2(model4.1,model4.2, method = "P")
psb2(model4.1,model4.2, no.traits = 5, method = "P")
rm(list =ls())
load('MultiEnv_Phenotype.RData')
ls()
# source the plotting script to make the P-matrix pictures ----
source('psb2.R')
# Example 4.1 data are not loaded -----
# Example 4.1 Data: a more creative phenotype for visualisation ----
#-5,-2,-1,-2,-3,5,-7,2,1,4
bv_4.1 <- lapply(1, mvrnorm, n=200, mu=rep(0,10), Sigma=G_3)
sire4.1<-lapply(bv_4, function(x) data.frame(sire=rep(1:nrow(x),each=4), rpt=rep(1:4,nrow(x)),
res1=rnorm(800,-5,1.35^2),
res2=rnorm(800,-2,1.35^2),
res3=rnorm(800,-1,1.35^2),
res4=rnorm(800,-2,1.35^2),
res5=rnorm(800,-3,1.35^2),
res6=rnorm(800,5,1.35^2),
res7=rnorm(800,-7,1.35^2),
res8=rnorm(800,2,1.35^2),
res9=rnorm(800,1,1.35^2),
res10=rnorm(800,4,1.35^2),
bv1=rep(x[,1],each=4),bv2=rep(x[,2],each=4),bv3=rep(x[,3],each=4),bv4=rep(x[,4],each=4),bv5=rep(x[,5],each=4),
bv6=rep(x[,6],each=4),bv7=rep(x[,7],each=4),bv8=rep(x[,8],each=4),bv9=rep(x[,9],each=4),bv10=rep(x[,10],each=4)))
data4.1<-lapply(sire4.1, function(x) cbind(x, trait1=x$res1+x$bv1, trait2=x$res2+x$bv2, trait3=x$res3+x$bv3,trait4=x$res4+x$bv4,trait5=x$res5+x$bv5,trait6=x$res6+x$bv6,trait7=x$res7+x$bv7,trait8=x$res8+x$bv8,trait9=x$res9+x$bv9,trait10=x$res10+x$bv10))
# plot example 4.1
traits<-data4.1[[1]][,23:32]
#	Plot Trait x Env patterns
col2rgb(c("black","red","green","blue","yellow"))
par(mar=c(5,5,4,1))
# plot first trait without axes
plot(traits$trait1~rep(1,800),col=1,xlim=c(0.75,2.5),ylim=c(-12,12),axes=FALSE, ylab="Trait Value", xlab="Environment")
axis(2) # add y axis
axis(1,at=c(1,2)) # add x-axis
# add clone means at jittered locations for E1
points(traits$trait2~rep(1.05,800),col=2,xlim=c(0,3))
points(traits$trait3~rep(1.1,800),col=3,xlim=c(0,3))
points(traits$trait4~rep(0.9,800),col=4,xlim=c(0,3))
points(traits$trait5~rep(0.95,800),col="yellow",xlim=c(0,3))
# add clone means at jittered locations for E2
points(traits$trait6~rep(2,800),col=1,xlim=c(0,3))
points(traits$trait7~rep(2.05,800),col=2,xlim=c(0,3))
points(traits$trait8~rep(2.1,800),col=3,xlim=c(0,3))
points(traits$trait9~rep(1.9,800),col=4,xlim=c(0,3))
points(traits$trait10~rep(1.95,800),col="yellow",xlim=c(0,3))
# add lines between the dots
segments(rep(1,800),traits$trait1,rep(2,800),traits$trait6,rgb(0,0,0,0.2))
segments(rep(1.05,800),traits$trait2,rep(2.05,800),traits$trait7,rgb(1,0,0,0.1))
segments(rep(1.1,800),traits$trait3,rep(2.1,800),traits$trait8,rgb(0,1,0,0.1))
segments(rep(0.9,800),traits$trait4,rep(1.9,800),traits$trait9,rgb(0,0,1,0.2))
segments(rep(0.95,800),traits$trait5,rep(1.95,800),traits$trait10,rgb(1,1,0,0.1))
psb2(model4.1, model4.2, no.traits = 5, method = "P")
ls()
psb2(model4.1P, model4.2P, no.traits = 5, method = "P")
ls()
load('SpecialPhenotypeModels.Rdata')
ls()
psb2(model4.1P.1, model4.2P.1, no.traits = 5, method = "P")
?saveRDS
save('PhenCovPlottingExample_4Jan18.RData')
?save
ls()
rm(list = ls())
library(mvtnorm)
library(MASS)
library(MCMCglmm)
# load these .RData files ----
# they load the Gmatrices, the phentoypic data generated by them
# and the Bayesian MCMC models run analysing them as P-matrices
# ALL CODE TO DO THIS is provided below, commented out, after the fun stuff.
load('MultiEnv_Phenotype.RData')
load('SpecialPhenotypeModels.Rdata')
# Example 4.1 data are not loaded -----
# Example 4.1 Data: a more creative phenotype for visualisation ----
#-5,-2,-1,-2,-3,5,-7,2,1,4
bv_4.1 <- lapply(1, mvrnorm, n=200, mu=rep(0,10), Sigma=G_3)
sire4.1<-lapply(bv_4, function(x) data.frame(sire=rep(1:nrow(x),each=4), rpt=rep(1:4,nrow(x)),
res1=rnorm(800,-5,1.35^2),
res2=rnorm(800,-2,1.35^2),
res3=rnorm(800,-1,1.35^2),
res4=rnorm(800,-2,1.35^2),
res5=rnorm(800,-3,1.35^2),
res6=rnorm(800,5,1.35^2),
res7=rnorm(800,-7,1.35^2),
res8=rnorm(800,2,1.35^2),
res9=rnorm(800,1,1.35^2),
res10=rnorm(800,4,1.35^2),
bv1=rep(x[,1],each=4),bv2=rep(x[,2],each=4),bv3=rep(x[,3],each=4),bv4=rep(x[,4],each=4),bv5=rep(x[,5],each=4),
bv6=rep(x[,6],each=4),bv7=rep(x[,7],each=4),bv8=rep(x[,8],each=4),bv9=rep(x[,9],each=4),bv10=rep(x[,10],each=4)))
data4.1<-lapply(sire4.1, function(x) cbind(x, trait1=x$res1+x$bv1, trait2=x$res2+x$bv2, trait3=x$res3+x$bv3,trait4=x$res4+x$bv4,trait5=x$res5+x$bv5,trait6=x$res6+x$bv6,trait7=x$res7+x$bv7,trait8=x$res8+x$bv8,trait9=x$res9+x$bv9,trait10=x$res10+x$bv10))
save.image('PhenCovVisualisation_4Jan18.RData')
rm(list = ls())
load('PhenCovVisualisation_4Jan18.RData')
ls()
# source the plotting script to make the P-matrix pictures ----
source('psb2.R')
# plot example 4.1
traits<-data4.1[[1]][,23:32]
# psb2 is the visualisation and analyisis tool for P-matrices
# must specify the models, the number of traits, the method = "P"
# and various other things linked to annnotation by RGL package
psb2(model4.1P.1, model4.2P.1, no.traits = 5, method = "P", axes.lab = TRUE)
head(traits)
library(dplyr)
?gather
library(tidyverse)
?gather
trait.df<-rbind(select(traits, 1:5), select(traits, 6:10))
# isolate the trait values
traits<-data.frame(data4.1[[1]][,23:32])
trait.df<-rbind(select(traits, 1:5), select(traits, 6:10))
select(traits, 1:5)
E1<-select(traits, 1:5)
names(E1)<-names(E2)<-c("T1","T2","T3","T4","T5")
dim(traits)
Env <- rep(c("E1", "E2"), each = 400)
trait.df<-data.frame(Env, rbind(E1, E2))
E1<-select(traits, 1:5)
E2<-select(traits, 6:10)
names(E1)<-names(E2)<-c("T1","T2","T3","T4","T5")
Env <- rep(c("E1", "E2"), each = 400)
trait.df<-data.frame(Env, rbind(E1, E2))
head(trait.df)
ggplot(trait.df, aes(x = Env, y = T1))+
geom_point()+
geom_line()+
theme_bw()
ggplot(trait.df, aes(x = Env, y = T1, group = 1))+
geom_point()+
geom_line()+
theme_bw()
ID <- rep(1:400, 2)
trait.df<-data.frame(Env, ID, rbind(E1, E2))
ggplot(trait.df, aes(x = Env, y = T1, group = ID))+
geom_point()+
geom_line()+
theme_bw()
head(trait.df)
ggplot(trait.df, aes(x = Env, y = T1, colour = ID, group = ID))+
geom_point()+
geom_line()+
theme_bw()
ID <- factor(rep(1:400, 2))
E1<-select(traits, 1:5)
E2<-select(traits, 6:10)
names(E1)<-names(E2)<-c("T1","T2","T3","T4","T5")
Env <- rep(c("E1", "E2"), each = 400)
ID <- factor(rep(1:400, 2))
trait.df<-data.frame(Env, ID, rbind(E1, E2))
ggplot(trait.df, aes(x = Env, y = T1, group = ID))+
geom_point()+
geom_line()+
theme_bw()
glimpse(trait.df)
ggplot(trait.df, aes(x = Env, y = T1, colour = ID,group = ID))+
geom_point()+
geom_line()+
theme_bw()
# Example P-matrix Modellings ----------------------------------------------------
# Inlcuding 'Reaction Norm Pictures'
# Including MCMC Models in .RData
# Including Centroid Shifting P-matrix visualisation
# Requires the following libraries ----------------------------------------------------
library(mvtnorm)
library(MASS)
library(MCMCglmm)
# load these .RData files ----
# they load the Gmatrices, the phentoypic data generated by them
# and the Bayesian MCMC models run analysing them as P-matrices
# ALL CODE TO DO THIS is provided below, commented out, after the fun stuff.
load('PhenCovVisualisation_4Jan18.RData')
# source the plotting script to make the P-matrix pictures ----
# also performs some analyses.
source('psb2.R')
# plot example 4.1 Trait x Env patterns ---
# it is a nice picture
# isolate the trait values
traits<-data.frame(data4.1[[1]][,23:32])
# choose colours and set margins (yes, it is BASE plotting....)
col2rgb(c("black","red","green","blue","yellow"))
par(mar=c(5,5,4,1))
# plot first trait without axes
plot(traits$trait1~rep(1,800), col=1, xlim=c(0.75,2.5), ylim=c(-12,12),
axes=FALSE, ylab="Trait Value", xlab="Environment")
axis(2) # add y axis
axis(1,at=c(1,2)) # add x-axis
# add clone means at jittered locations for E1
points(traits$trait2~rep(1.05,800),col=2,xlim=c(0,3))
points(traits$trait3~rep(1.1,800),col=3,xlim=c(0,3))
points(traits$trait4~rep(0.9,800),col=4,xlim=c(0,3))
points(traits$trait5~rep(0.95,800),col="yellow",xlim=c(0,3))
# add clone means at jittered locations for E2
points(traits$trait6~rep(2,800),col=1,xlim=c(0,3))
points(traits$trait7~rep(2.05,800),col=2,xlim=c(0,3))
points(traits$trait8~rep(2.1,800),col=3,xlim=c(0,3))
points(traits$trait9~rep(1.9,800),col=4,xlim=c(0,3))
points(traits$trait10~rep(1.95,800),col="yellow",xlim=c(0,3))
# add lines between the dots
segments(rep(1,800),traits$trait1,rep(2,800),traits$trait6,rgb(0,0,0,0.2))
segments(rep(1.05,800),traits$trait2,rep(2.05,800),traits$trait7,rgb(1,0,0,0.1))
segments(rep(1.1,800),traits$trait3,rep(2.1,800),traits$trait8,rgb(0,1,0,0.1))
segments(rep(0.9,800),traits$trait4,rep(1.9,800),traits$trait9,rgb(0,0,1,0.2))
segments(rep(0.95,800),traits$trait5,rep(1.95,800),traits$trait10,rgb(1,1,0,0.1))
# Plotting the P-Matrices and Centroids and 'Shift' or 'Plasticity' --------------------
# psb2 is the visualisation and analyisis tool for P-matrices
# it uses the rgl() function and libarary, so will require xquarts on a mac
# must specify the models, the number of traits, the method = "P"
# and various other things linked to annnotation by RGL package
# axes.lab = TRUE plots the loadings from the 'PCA' onto the 3 axes as labels
psb2(model4.1P.1, model4.2P.1, no.traits = 5, method = "P", axes.lab = TRUE)
psb2
ls()
library(mvtnorm)
library(MASS)
library(MCMCglmm)
update.packages()
# source the plotting script to make the P-matrix pictures ----
# also performs some analyses.
source('psb2.R')
# isolate the trait values
traits<-data.frame(data4.1[[1]][,23:32])
# choose colours and set margins (yes, it is BASE plotting....)
col2rgb(c("black","red","green","blue","yellow"))
par(mar=c(5,5,4,1))
# plot first trait without axes
plot(traits$trait1~rep(1,800), col=1, xlim=c(0.75,2.5), ylim=c(-12,12),
axes=FALSE, ylab="Trait Value", xlab="Environment")
axis(2) # add y axis
axis(1,at=c(1,2)) # add x-axis
# add clone means at jittered locations for E1
points(traits$trait2~rep(1.05,800),col=2,xlim=c(0,3))
points(traits$trait3~rep(1.1,800),col=3,xlim=c(0,3))
points(traits$trait4~rep(0.9,800),col=4,xlim=c(0,3))
points(traits$trait5~rep(0.95,800),col="yellow",xlim=c(0,3))
# add clone means at jittered locations for E2
points(traits$trait6~rep(2,800),col=1,xlim=c(0,3))
points(traits$trait7~rep(2.05,800),col=2,xlim=c(0,3))
points(traits$trait8~rep(2.1,800),col=3,xlim=c(0,3))
points(traits$trait9~rep(1.9,800),col=4,xlim=c(0,3))
points(traits$trait10~rep(1.95,800),col="yellow",xlim=c(0,3))
# add lines between the dots
segments(rep(1,800),traits$trait1,rep(2,800),traits$trait6,rgb(0,0,0,0.2))
segments(rep(1.05,800),traits$trait2,rep(2.05,800),traits$trait7,rgb(1,0,0,0.1))
segments(rep(1.1,800),traits$trait3,rep(2.1,800),traits$trait8,rgb(0,1,0,0.1))
segments(rep(0.9,800),traits$trait4,rep(1.9,800),traits$trait9,rgb(0,0,1,0.2))
segments(rep(0.95,800),traits$trait5,rep(1.95,800),traits$trait10,rgb(1,1,0,0.1))
psb2(model4.1P.1, model4.2P.1, no.traits = 5, method = "P", axes.lab = TRUE)
require(rgl)
install.packages('rgl')
require(rgl)
psb2(model4.1P.1, model4.2P.1, no.traits = 5, method = "P", axes.lab = TRUE)
library(rgl)
install.packages("rgl")
library(rgl)
remotes::install_github("dmurdoch/rgl")
library(mvtnorm)
library(MASS)
library(MCMCglmm)
library(rgl)
source('psb2.R')
# plot example 4.1 Trait x Env patterns ---
# it is a nice picture
# isolate the trait values
traits<-data.frame(data4.1[[1]][,23:32])
psb2(model4.1P.1, model4.2P.1, no.traits = 5, method = "P", axes.lab = TRUE)
